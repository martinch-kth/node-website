<!DOCTYPE html>
<html lang="en">
<head>

    <script src="javascript/socket.io.js"></script>
    <script src="javascript/socket.io-stream.js"></script>

    <link rel="stylesheet" href="/stylesheets/buildstatus.css">

    <!-- jQuery library -->
    <script src="javascript/jquery.min.js"></script>

    <!--  ADD later.. <script src="javascript/menu.js"></script>  -->

    <link rel="stylesheet" href="/stylesheets/semantic.css">
    <script src="javascript/semantic/semantic.js"></script>

    <script src="javascript/moment.min.js"></script>
    <script>
        moment().format();
    </script>

</head>
<body class="contact-background-image">


<div id="ongoingTasksContainer"></div>

<script>








    $(document).ready(function() {


        // Update the bootstrap grid once the tasks are added
        function updateTaskContainerHead(containerId, jenkins_reff) {


            function isNull(obj, key) {
                return (obj[key] == null || obj[key] === undefined || obj[key] === "null");
            }

            function validate(obj) {
                var objKeys = Object.keys(obj);
                objKeys.forEach((key) => {
                    if(isNull(obj, key)) {
                        obj[key] = "";
                    }
                    if(typeof(obj[key]) == "object") {
                        validate(obj[key]);
                    }
                });
            }

            validate(jenkins_reff);

            var reff_element =

            '<div id="' + jenkins_reff.getJobInfo.url + '" class="ui card"  style="width: 100%;margin-top: 5px;">' +

                '<div class="row" style="margin-top: -10px;margin-bottom: -10px">' +

                    '    <div id="statuscolor_' + jenkins_reff.getJobInfo.url + '" class="FixedHeightContainerStatus" style="word-break:break-all;width: 9%;float: left;margin-top: 13px;margin-left:5px;margin-bottom: 16px;margin-right:5px;border-radius: 5px;padding-top: 5px;text-align:center;">' +
                    '        <h2 class="ui medium icon header">' +
                    '            <i class="laptop icon"></i>' +
                    '            <div class="content">' + jenkins_reff.reff_name + '</div>' +
                    '            <h5 style="margin-top: -5px" id="buildname_' + jenkins_reff.getJobInfo.url + '"></h5>' +
                    '        </h2>' +
                    '    </div>' +

                '                <div class="ui medium message FixedHeightContainer" style="width: 10%;float: left;margin-right: 5px;padding:2px;">' +
                '                  <i class="clock icon imuststyle"></i><div id="timer_' + jenkins_reff.getJobInfo.url + '"></div>' +
                '                    <div>Estimated duration: ' + moment.utc(jenkins_reff.getLastBuildInfo.estimatedDuration).format('HH [hours] mm [min]') + '</div>' +
                '                    <div>Job started: ' + moment.utc(jenkins_reff.getLastBuildInfo.timestamp).format(('dddd, MMMM Do YYYY, h:mm:ss a')) + '</div>' +
                '                ' +
                    '  <div class="item" style="padding-top:5px">' +

                    '           <div class="description">Job name: ' + jenkins_reff.getJobInfo.displayName + '</div>' +
                    '           <div class="description">Last successful build: #' + JSON.stringify(jenkins_reff.getJobInfo.lastCompletedBuild.number) + '</div>' +
                    '           <div class="description">Last failed build: #' + JSON.stringify(jenkins_reff.getJobInfo.lastFailedBuild.number) + '</div>' +
                    '           <div class="description">Last unsuccessful build: #' + JSON.stringify(jenkins_reff.getJobInfo.lastUnsuccessfulBuild.number) + '</div>' +
                    '   </div>' +
                '</div>' +



                        '<div id="modules_' + jenkins_reff.getJobInfo.url + '" class="ui list FixedHeightContainer" style="width: 22%;border: 1px solid black;border-radius: 5px;padding: 1px;float: left;margin-right: 5px;"></div>' +

                  '<div class="FixedHeightContainer" id="scroll_' + jenkins_reff.getJobInfo.url + '" style="width: 57%;float: left;border: 1px solid black;border-radius: 5px;margin-top: 14px;">' +
                    '<pre id="out_' + jenkins_reff.getJobInfo.url + '"></pre>' +
                  '</div>' +

                '</div>';  // row
            '</div>';  // ui card main wrap

            // finns elementet? -> byt ut det...
            if ($('#' + jenkins_reff.getJobInfo.url.toString()).length)
            {
                $('#' + jenkins_reff.getJobInfo.url.toString()).replaceWith(reff_element)
            }
            else
            {
                $('#' + containerId).append(reff_element)  // if non-existing
            }

        }

 $(function() {                   // BYT mot Serverns URL auto-m....
            var socket = io.connect('http://localhost:3000');

     // http://plnkr.co/edit/55h5cmxOAZeNTGbKzedA?p=preview&preview
     setInterval(function thing() {

         // div id= " # statuscolor_http10681081658080jobinstall  ...
         //

         //  1) kör 6 st if? kolla vilka ID som finns .. skapa en array?
         //
         //  blir konstig om det dyker upp flera reffar... eller gå ner...

         // får en array med ... ..eller object?.. vad jag med detta till..?
         //
         var all_reffs = $('div')
             .filter(function() {
                 return this.id.match(/statuscolor_http/);
             })

       // console.log("antal divvar..: " +all_reffs.length)

         if (all_reffs.length <=3)
         {
             // gör inget...
             console.log("under tre...reffar..")

         }
         else if(all_reffs.length > 3 )
         {
             console.log("ÖVER tre...reffar..")

/*
             var arrays = [], size = all_reffs.length/2; // dela alla i två arrayer..

             while (all_reffs.length > 0)
                 arrays.push(all_reffs.splice(0, size));
*/
             // nu borde man ha två array..

             console.log("alla element i allrefs" + all_reffs)

             // om jag gömmer alla så blir det 2 st...
             // .........................................

            // Gör detta hela tiden...nu...
        //     setInterval(function thingtwo() {
           /*
             for (const element of all_reffs)
             {

             }
           */
             var b1 = $(all_reffs[0]).attr('id')
             var b2 = $(all_reffs[1]).attr('id')
           //
                var b3 = $(all_reffs[0]).attr('id')
             console.log("IIIIIIIIIIIDDDDDDDDDDDDDDDDD"+ b3)
           //   var b2 = all_reffs[1];

              if(b1['style'].display == 'none')
              {
                     b1['style'].display = 'block';
                     b2['style'].display = 'none';
              }
              else
              {
                     b1['style'].display = 'none';
                     b2['style'].display = 'block';
              }


        //     }, 2000);

         }
         // dela upp length i 2 och 2.. modulo två?..
         /*
         var a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'];

         if all_reffs > 3 ...dela på 2.. ..?? visa 3 i taget annars.. annars 2 i taget... kommer vara max 2-2 eller 3-3...

           else .. dela inte alls om det är under <= 3 ..

         var arrays = [], size = all_reffs.length/2; // om men

         while (a.length > 0)
             arrays.push(a.splice(0, size));

         så... nu har man en array med som bäst 3 -3  hälften hälften...

*/
         /*
         if ($("#httplocalhost8080jobtest3tva").length && $("#httplocalhost8080jobtest3tvatre").length)
         {
             var b1 = document.getElementById('httplocalhost8080jobtest3tva');
             var b2 = document.getElementById('httplocalhost8080jobtest3tvatre');

             if(b1['style'].display == 'none')
             {
                 b1['style'].display = 'block';
                 b2['style'].display = 'none';
             }
             else
             {
                 b1['style'].display = 'none';
                 b2['style'].display = 'block';
             }
         }
         else
         {
             //no elements found  --- inte göra nått??..
             console.log("....inte hittat nått element ännu...")
         }
         */

     }, 5000);


            var clear_console_reff1 = false
            var clear_console_reff2 = false
            var clear_console_reff3 = false
    //      var clear_console_reff4 = false
            var clear_console_reff5 = false
            var clear_console_reff6 = false

            var jenkins_info_reff1
            var jenkins_info_reff2
            var jenkins_info_reff3
    //      var jenkins_info_reff4
            var jenkins_info_reff5
            var jenkins_info_reff6

          var reff1_url = "http://127.0.0.1:8080"
          var reff2_url = "http://localhost:8080"


     var reff1_obj // only used as a timer object..maybe more later..
     var reff2_obj

            class Reff {
                constructor(jenkins_2_obj) {
                    this.display_name = jenkins_2_obj.getJobInfo.url;

                    this.jenkins_2_obj = jenkins_2_obj

                    // Timer stuff...
                    var now  = moment()
                    var then = moment(this.jenkins_2_obj.getLastBuildInfo.timestamp)
                    this.time_since =  moment.utc(now.diff(then))

                    this.isRunning = false;
                    this.runTimer;
                }
                startTimer()
                {
                  //  if (!this.isRunning) {
                  //      this.isRunning = true;
                        this.runTimer = setInterval(() => {

                            this.time_since.add(1, 'second');
                            $('#timer_' + this.display_name).html(this.time_since.format('HH:mm:ss'))

                        }, 1000);
                 //   }
                }
                stopTimer() {
                 //   if (this.isRunning) {
                        clearInterval(this.runTimer);
                        this.runTimer = null
                 //       this.isRunning = false;
                 //   }
                }
            }

            socket.on("connect",function() {
                console.log("on connect");

                ss(socket).on('jenkins_info_reff1', function(stream,data)
                {
                    jenkins_info_reff1 = JSON.parse(data);

                    var temp = jenkins_info_reff1.getJobInfo.url
                    jenkins_info_reff1.getJobInfo.url =  temp.replace(/[^a-z0-9-_]+/gi, "")

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff1);

                    // fake some...

                    jenkins_info_reff1.getJobInfo.url =  jenkins_info_reff1.getJobInfo.url + "tva"

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff1);

                    jenkins_info_reff1.getJobInfo.url =  jenkins_info_reff1.getJobInfo.url + "tre"

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff1);

                    reff1_obj = new Reff(jenkins_info_reff1)
                    reff1_obj.startTimer()

                });

                // Får data från reff1 här som ska visa i textboxxen..
                ss(socket).on(reff1_url, function(stream,data, modules_status) {

                    $("#modules_"+ jenkins_info_reff1.getJobInfo.url).empty()

                    var log = data.split("\n")  // split on each line..

                    // Default color is grey - installing status
                    $("#statuscolor_" + jenkins_info_reff1.getJobInfo.url).css('background-color','silver');

                    var buildname = ""

                    for (const line of log) {

                        if (line.includes("Using latest build with specific key word:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            buildname = line_array.pop();             // last element is the build name

                            // sätt ut den...
                            $("#buildname_"+jenkins_info_reff1.getJobInfo.url).text(buildname)
                        }

                        if (line.includes("Finished:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            reff1_obj.stopTimer() // stoppa tiden...

                            var modules_splitted = modules_status.split("\n")  // split on each line..

                            var all_modules = ""
                            for (const line of modules_splitted)
                            {
                                all_modules += '<div class="item">'+ line + '</div>'
                            }

                            $("#modules_" + jenkins_info_reff1.getJobInfo.url).html(all_modules)

                            var line_array = line.split(/ +/)    // split on spaces only
                            var build_result = line_array.pop(); // last element is the result

                                if (build_result.trim() === 'SUCCESS')
                                {
                                    $("#statuscolor_" + jenkins_info_reff1.getJobInfo.url).css('background-color','#097d00');
                                    $('#' + jenkins_info_reff1.getJobInfo.url).transition({
                                    animation  : 'jiggle',
                                    duration   : '1s',
                                    allowRepeats : 'false'
                                })
                                }

                                if (build_result.trim() === 'FAILURE' || build_result.trim() === 'UNSTABLE')
                                {
                                    $("#statuscolor_" + jenkins_info_reff1.getJobInfo.url).css("background-color","#B22222")
                                    $('#' + jenkins_info_reff1.getJobInfo.url).transition('shake');
                                }
                        }
                    }

                    // Om reffen redan har text, ta bort den gamla texten.
                    if(clear_console_reff1)
                    {
                        $("#out_"+ jenkins_info_reff1.getJobInfo.url).empty()
                        clear_console_reff1 = false
                        console.log("clearing console...")
                    }

                    $("#out_"+ jenkins_info_reff1.getJobInfo.url).append(data) // streams text to logbox

                    var element = document.getElementById("scroll_" + jenkins_info_reff1.getJobInfo.url); // always scroll to the end of textbox
                    element.scrollTop = element.scrollHeight;
                });

                // Reff1 har fått all data, då är textboxxen klar, inget mer kommer in.
                ss(socket).on('end:'+ reff1_url, function(stream,data) {

                    clear_console_reff1 = true
                    console.log(reff1_url + " = browser refname. reff that will be cleared:"+ data)
                });



                ////////// reff 2 /////////////
                ss(socket).on('jenkins_info_reff2', function(stream,data)
                {
                    jenkins_info_reff2 = JSON.parse(data);

                    var temp = jenkins_info_reff2.getJobInfo.url
                    jenkins_info_reff2.getJobInfo.url =  temp.replace(/[^a-z0-9-_]+/gi, "")

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff2);

                    reff2_obj = new Reff(jenkins_info_reff2)
                    reff2_obj.startTimer()
                });

// Får data från reff2 här som ska visa i textboxxen..
                ss(socket).on(reff2_url, function(stream,data, modules_status) {

                    $("#modules_"+ jenkins_info_reff2.getJobInfo.url).empty()

                    var log = data.split("\n")  // split on each line..

                    // Default color is grey - installing status
                    $("#statuscolor_" + jenkins_info_reff2.getJobInfo.url).css('background-color','silver');

                    var buildname = ""

                    for (const line of log) {

                        if (line.includes("Using latest build with specific key word:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            buildname = line_array.pop();             // last element is the build name

                            // sätt ut den...
                            $("#buildname_"+jenkins_info_reff2.getJobInfo.url).text(buildname)
                        }

                        if (line.includes("Finished:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            reff2_obj.stopTimer() // stoppa tiden...

                            var modules_splitted = modules_status.split("\n")  // split on each line..

                            var all_modules = ""
                            for (const line of modules_splitted)
                            {
                                all_modules += '<div class="item">'+ line + '</div>'
                            }

                            $("#modules_" + jenkins_info_reff2.getJobInfo.url).html(all_modules)

                            var line_array = line.split(/ +/)    // split on spaces only
                            var build_result = line_array.pop(); // last element is the result

                            if (build_result.trim() === 'SUCCESS')
                            {
                                $("#statuscolor_" + jenkins_info_reff2.getJobInfo.url).css('background-color','#097d00');
                                $('#' + jenkins_info_reff2.getJobInfo.url).transition({
                                    animation  : 'jiggle',
                                    duration   : '1s',
                                    allowRepeats : 'false'
                                })
                            }

                            if (build_result.trim() === 'FAILURE' || build_result.trim() === 'UNSTABLE')
                            {
                                $("#statuscolor_" + jenkins_info_reff2.getJobInfo.url).css("background-color","#B22222")
                                $('#' + jenkins_info_reff2.getJobInfo.url).transition('shake');
                            }
                        }
                    }

                    // Om reffen redan har text, ta bort den gamla texten.
                    if(clear_console_reff2)
                    {
                        $("#out_"+ jenkins_info_reff2.getJobInfo.url).empty()
                        clear_console_reff2 = false
                        console.log("clearing console...")
                    }

                    $("#out_"+ jenkins_info_reff2.getJobInfo.url).append(data) // streams text to logbox

                    var element = document.getElementById("scroll_" + jenkins_info_reff2.getJobInfo.url); // always scroll to the end of textbox
                    element.scrollTop = element.scrollHeight;
                });

// reff2 har fått all data, då är textboxxen klar, inget mer kommer in.
                ss(socket).on('end:'+ reff2_url, function(stream,data) {

                    clear_console_reff2 = true
                    console.log(reff2_url + " = browser refname. reff that will be cleared:"+ data)
                });


                //////////////////////////////

            });
        });
    });
 </script>
</body>
</html>
