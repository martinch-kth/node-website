<!DOCTYPE html>
<!--
Generic treemap, based on http://bost.ocks.org/mike/treemap/
-->
<html>
<head>

    <% include partials/script %>

    <meta charset="utf-8">
    <title>Zoomable treemap template</title>

    <!-- d3 -->
    <script src="javascript/http_d3js.org_d3.v3.js"></script>

    <!-- Latest compiled and minified CSS -->
    <link rel="stylesheet" href="stylesheets/bootstrap.min.css">

    <link rel="stylesheet" href="stylesheets/semantic.css">
    <link rel="stylesheet" href="stylesheets/text_search_style.css">

    <% include partials/head %>

</head>
<body>

<div class="row">
    <div class="column">
      <br id="main-container" style="padding-left: 50px">
      <% include partials/menu %>
    </div>
</div>

<div class="row">
    <div class="ui thirteen column grid">
        <div class="column">
            <div class="ui segment">
                <div class="ui statistic black">
                    <div class="value">
                        0
                    </div>
                    <div class="label">
                        Total
                    </div>
                </div>
            </div>

        </div>
        <div class="column">
            <div class="ui segment">
                <div class="ui statistic blue">
                    <div id="hosts" class="value">

                    </div>
                    <div class="label">
                        Hosts
                    </div>
                </div>
            </div>
        </div>
        <div class="column">
            <div class="ui segment">
                <div class="ui statistic green">
                    <div id="modules" class="value">

                    </div>
                    <div class="label">
                        Modules
                    </div>
                </div>
            </div>
        </div>
        <div class="column">
            <div class="ui segment">
                <div class="ui statistic red">
                    <div id="errors" class="value">

                    </div>
                    <div class="label">
                        Errors
                    </div>
                </div>
            </div>
        </div>
        <div class="column">
            <div class="ui segment">
                <div class="ui statistic yellow">
                    <div id="warnings" class="value">0
                    </div>
                    <div class="label">
                        Warnings
                    </div>
                </div>
            </div>
        </div>
        <div class="column">
            <div class="ui segment">
                <div class="ui statistic purple">
                    <div class="value">
                        0
                    </div>
                    <div class="label">
                        Exceptions
                    </div>
                </div>
            </div>
        </div>

        <div class="column">

        </div>

        <div class="column">
        <div class="row">

            <div class="ui search">
                <input class="prompt" type="text" placeholder="Search all...">
                <div class="results"></div>
            </div>

        </div>
        </div>

    </div>
</div>

<div class="row" style="padding: 10px">
    <div class="ui checkbox">
        <input type="checkbox" name="example">
        <label>Display Warnings</label>
    </div>

    <div class="ui checkbox">
        <input type="checkbox" name="example">
        <label>Display Errors</label>
    </div>

    <div class="ui checkbox">
        <input type="checkbox" name="example">
        <label>Display Exceptions</label>
    </div>
</div>

<div class="ui two column grid">
    <div class="row">
        <div class="column">
            <div style="width: 80%">
                <select id="filedropdown" class="ui dropdown large text filedrop fluid">
                </select>
            </div>
        </div>

        <div class="column">
            <div style="width: 80%">
                <select id="diff_dropdown" class="ui dropdown large text diffdrop fluid">
                </select>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div id="chart" style="padding-top: 5px"></div>
</div>


<div class="ui one column grid">
    <div class="row">
        <div class="column"></div>
        <div class="column"><div style="width:95%" id="display3"></div></div>
        <div class="column"></div>
    </div>
</div>


<div class="row">
    <div id="status" style="padding-top: 5px"></div>
</div>



<script>

    // to keep track of diff path... and file choosen.. global ...

    var diff_path = []

    var return_first
    var return_second
    ////////////////////////////////////////////////////////////////////

    window.addEventListener('message', function (e) {
        var opts = e.data.opts,
            data = e.data.data;

        return main(opts, data);
    });

    var screen_width = $(window).width();

    var defaults = {
        margin: {top: 24, right: 0, bottom: 0, left: 0},
        rootname: "TOP",
        format: ",d",
        title: "",
        width: screen_width - screen_width / 12,
        height: screen_width / 3
    };

    function main(o, data) {
        var root,
            opts = $.extend(true, {}, defaults, o),
            formatNumber = d3.format(opts.format),
            rname = opts.rootname,
            margin = opts.margin,
            theight = 36 + 16;

        $('#chart').width(opts.width).height(opts.height);

        $('#status').width(opts.width)


        var width = opts.width - margin.left - margin.right,
            height = opts.height - margin.top - margin.bottom - theight,
            transitioning;

        var color =  d3.scale.category20();

        var x = d3.scale.linear()
            .domain([0, width])
            .range([0, width]);

        var y = d3.scale.linear()
            .domain([0, height])
            .range([0, height]);

        var treemap = d3.layout.treemap()
            .children(function (d, depth) {
                return depth ? null : d._children;
            })
            .sort(function (a, b) {
                return a.value - b.value;
            })
            .ratio(height / width * 0.5 * (1 + Math.sqrt(5)))
            .round(false);

        var svg = d3.select("#chart").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.bottom + margin.top)
            .style("margin-left", -margin.left + "px")
            .style("margin.right", -margin.right + "px")
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .style("shape-rendering", "crispEdges");

        var grandparent = svg.append("g")
            .attr("class", "grandparent");

        grandparent.append("rect")
            .attr("y", -margin.top)
            .attr("width", width)
            .attr("height", margin.top);


        grandparent.append("text")
            .attr("x", 6)
            .attr("y", 6 - margin.top)
            .attr("dy", ".75em");

        if (opts.title) {
            $("#chart").prepend("<p class='title'>" + opts.title + "</p>");
        }
        if (data instanceof Array) {
            root = {key: rname, values: data};
        } else {
            root = data;
        }

        initialize(root);
        accumulate(root);
        layout(root);
        display(root);

        if (window.parent !== window) {
            var myheight = document.documentElement.scrollHeight || document.body.scrollHeight;
            window.parent.postMessage({height: myheight}, '*');
        }

        function initialize(root) {
            root.x = root.y = 0;
            root.dx = width;
            root.dy = height;
            root.depth = 0;
        }

        // Aggregate the values for internal nodes. This is normally done by the
        // treemap layout, but not here because of our custom implementation.
        // We also take a snapshot of the original children (_children) to avoid
        // the children being overwritten when when layout is computed.
        function accumulate(d) {
            return (d._children = d.values)
                ? d.value = d.values.reduce(function (p, v) {
                    return p + accumulate(v);
                }, 0)
                : d.value;
        }

        // Compute the treemap layout recursively such that each group of siblings
        // uses the same size (1×1) rather than the dimensions of the parent cell.
        // This optimizes the layout for the current zoom state. Note that a wrapper
        // object is created for the parent node for each group of siblings so that
        // the parent’s dimensions are not discarded as we recurse. Since each group
        // of sibling was laid out in 1×1, we must rescale to fit using absolute
        // coordinates. This lets us use a viewport to zoom.
        function layout(d) {
            if (d._children) {
                treemap.nodes({_children: d._children});
                d._children.forEach(function (c) {
                    c.x = d.x + c.x * d.dx;
                    c.y = d.y + c.y * d.dy;
                    c.dx *= d.dx;
                    c.dy *= d.dy;
                    c.parent = d;
                    layout(c);
                });
            }
        }

        function display(d) {
            grandparent
                .datum(d.parent)


                .on('click', function (d, i) {

                    transition(d)
                    $("#status").empty()

                })

                .select("text")
                .text(name(d));

            var g1 = svg.insert("g", ".grandparent")
                .datum(d)
                .attr("class", "depth");

            var g = g1.selectAll("g")
                .data(d._children)
                .enter().append("g");


            // TA bort om man INTE vill se alla moduler på en gång.
            g.filter(function (d) {
                return d._children;
            })
                .classed("children", true);


            // new functions...
            g.filter(function (d) {
                return d._children;
            })
                .classed("child", true)

                .on('click', function (d, i) {

                    $("#status").empty()
                    $("#status").append(d._children[0].key);

                    // module and host are saved on click to later make a diff

                    // göra om.. kolla inte på längd.. kolla på vad man klicka..på.. om det är host eller module..
                    // inte på Arrayen...

                    var list = Object.entries(d._children[0])
                        .filter(([key, value]) => `${key}`[value] !== 'undefined' ) //has options
                        .map(([key, value], idx) => `{${idx} {${key}: ${value}}}`)

                    console.log(list[1].toString().includes("region"))

                    /*
                    // if false = host true = module
                    if (list[1].toString().includes("region"))
                    {
                        alert ("module")
                    }
                    else{
                        alert("host!")
                    }
                    */

                //    console.log(Object.keys(d._children[0].key));




                    if (list[1].toString().includes("region") === false)  //host
                    {
                        diff_path = []
                    }

                    if (diff_path.length < 2)  // add ..
                    {
                        diff_path.push(d.key)

                        var second_dropdown = $('#diff_dropdown').dropdown('get text')

                        if (diff_path.length === 2 && second_dropdown !== "" ) // module,host and second filname has to exist
                        {
                            for (mod in return_first.modules) // check if module exist on same host
                            {
                                if (return_second.modules[mod].onHost === diff_path[0] && return_second.modules[mod].moduleName === diff_path[1])
                                {
                                    createDiff(JSON.stringify(return_first.modules[mod], null, 1),JSON.stringify(return_second.modules[mod], null, 1))
                                }
                            }
                        }
                    }

                    transition(d)
                });

            var children = g.selectAll(".child")
                .data(function (d) {
                    return d._children || [d];
                })
                .enter().append("g");


            children.append("rect")
                .attr("class", "child")
                .call(rect)
                .append("title")

                // all data här
                .text(function (d) {
                    return d.key + " (" + formatNumber(d.value) + ")";
                })   // ;

            children.append("text")
                .attr("class", "ctext")
                .text(function (d) {
                    return d.key;
                })
                .call(text2);

            g.append("rect")
                .attr("class", "parent")
                .call(rect);

            var t = g.append("text")
                .attr("class", "ptext")
                .attr("dy", ".75em")

            t.append("tspan")
                .text(function (d) {
                    return d.key;
                });
            t.append("tspan")
                .attr("dy", "1.0em")
                .text(function (d) {
                    return formatNumber(d.value);
                });
            t.call(text);

            g.selectAll("rect")
                .style("fill", function (d) {
                    return color(d.key);
                });


            function transition(d) {
                if (transitioning || !d) return;
                transitioning = true;

                var g2 = display(d),
                    t1 = g1.transition().duration(750),
                    t2 = g2.transition().duration(750);

                // Update the domain only after entering new elements.
                x.domain([d.x, d.x + d.dx]);
                y.domain([d.y, d.y + d.dy]);

                // Enable anti-aliasing during the transition.
                svg.style("shape-rendering", null);

                // Draw child nodes on top of parent nodes.
                svg.selectAll(".depth").sort(function (a, b) {
                    return a.depth - b.depth;
                });

                // Fade-in entering text.
                g2.selectAll("text").style("fill-opacity", 0);

                // Transition to the new view.
                t1.selectAll(".ptext").call(text).style("fill-opacity", 0);
                t1.selectAll(".ctext").call(text2).style("fill-opacity", 0);
                t2.selectAll(".ptext").call(text).style("fill-opacity", 1);
                t2.selectAll(".ctext").call(text2).style("fill-opacity", 1);
                t1.selectAll("rect").call(rect);
                t2.selectAll("rect").call(rect);

                // Remove the old node when the transition is finished.
                t1.remove().each("end", function () {
                    svg.style("shape-rendering", "crispEdges");
                    transitioning = false;
                });
            }

            return g;
        }

        function text(text) {
            text.selectAll("tspan")
                .attr("x", function (d) {
                    return x(d.x) + 6;
                })
            text.attr("x", function (d) {
                return x(d.x) + 6;
            })
                .attr("y", function (d) {
                    return y(d.y) + 6;
                })
                .style("opacity", function (d) {
                    return this.getComputedTextLength() < x(d.x + d.dx) - x(d.x) ? 1 : 0;
                });
        }

        function text2(text) {
            text.attr("x", function (d) {
                return x(d.x + d.dx) - this.getComputedTextLength() - 6;
            })
                .attr("y", function (d) {
                    return y(d.y + d.dy) - 6;
                })
                .style("opacity", function (d) {
                    return this.getComputedTextLength() < x(d.x + d.dx) - x(d.x) ? 1 : 0;
                });
        }

        function rect(rect) {
            rect.attr("x", function (d) {
                return x(d.x);
            })
                .attr("y", function (d) {
                    return y(d.y);
                })
                .attr("width", function (d) {
                    return x(d.x + d.dx) - x(d.x);
                })
                .attr("height", function (d) {
                    return y(d.y + d.dy) - y(d.y);
                });
        }

        function name(d) {
            return d.parent
                ? name(d.parent) + " / " + d.key + " (" + formatNumber(d.value) + ")"
                : d.key + " (" + formatNumber(d.value) + ")";
        }
    }

    // However, if you want to get the value of a nested property and not only check its existence, here is a simple one-line function:
    function getNested(obj, ...args) {
        return args.reduce((obj, level) => obj && obj[level], obj)
    }

    function createStatistics(data) {

        var hosts = []
        var modules = []

        var total_errors = 0

        for (var i = 0; i < data.length; i++) {

            hosts.push(data[i].region)
            modules.push(data[i].subregion)

            total_errors += parseInt(data[i].value) // occurrences
        }

        $( "#hosts").html(Array.from(new Set(hosts)).length)
        $( "#modules").html(Array.from(new Set(modules)).length)
        $( "#errors").html(String(total_errors))
    }


    function createAllList(data) {

      //  exempel:    { category: 'host1/Module2', title: 'massa feltext
      //              { category: 'host2/Module2', title: 'massa feltext....

        var all_info = []

        for (var i = 0; i < data.length; i++) {

            all_info.push({
                "category": data[i].region + "/" + data[i].subregion,
                "title": data[i].key
            })
        }
        return all_info
    }

    function createDiff(one, other){

        // rubrik                kan va vad som helst...
        var diff = JsDiff.createPatch('fileName', one, other, 'oldHeader', 'newHeader');
        //var diff2htmlUi = new Diff2HtmlUI({ diff: diff });

        // anvädn js2html
            const targetElement = document.getElementById('display3');              // lines  ..stod det innan...
            const configuration = { inputFormat: 'json', drawFileList: true, matching: 'none', highlight: true,  outputFormat: 'side-by-side' };
            const diff2htmlUi = new Diff2HtmlUI(targetElement, diff, configuration);
            diff2htmlUi.draw();
            diff2htmlUi.highlightCode();
    }

    if (window.location.hash === "") {

        allfiles = JSON.parse('<%- JSON.stringify(filenames) %>');

        var default_file = allfiles[0].toString()

        // ta bort "public/data"...
        var trimmed_name = default_file.slice(12, default_file.length)

        function callback(response) {
            // do what you want...
            return_first = response
        }

        $.ajax({
            type: 'GET',
            url: '/data/'+ trimmed_name,
            'success': function(data){
                callback(data);

            },
            error: function(xhr, status, err) {
                console.log(xhr.responseText);
            }
        });

        d3.json("treemapinput?file=" + default_file, function (err, res) {
            if (!err) {

                // Load dropdown with filelist
                $('.ui.search')
                    .search({
                        type: 'category',
                        source: createAllList(res),
                        cache: false
                    });

                // få in all statistik här...
                createStatistics(res)

                var data = d3.nest().key(function (d) {
                    return d.region;
                }).key(function (d) {
                    return d.subregion;
                }).entries(res);
                main({title: ""}, {key: "Hosts", values: data});
            }
        });

    }


    /*  Tog bort Search module.. ett annat att söka i texten.. sätt tillbaka om det behövs sen..sparar ifall att..

    <div class="row">
     <div class="app" data-finder-wrapper data-finder-scroll-offset="175">
      <button class="finder-activator" data-finder-activator>Search Module</button>
      <div class="content" data-finder-content>
         <div id="status"></div>
      </div>
     </div>
    </div>

     */

    allfiles = JSON.parse('<%- JSON.stringify(filenames) %>');

    // TODO: removed "public/data" with slice()

    values = []
    var i;

    for (i = 0; i < allfiles.length; i++) {

        if (i===0)
        {
            dropdown_allfiles = {name : allfiles[i].slice(12, allfiles[i].length) ,value: [i], selected : true}
        }
        else
        {
            dropdown_allfiles = {name : allfiles[i].slice(12, allfiles[i].length) ,value: [i]}
        }
        values.push(dropdown_allfiles)
    }

    $('.ui.dropdown.filedrop')
        .dropdown({
            values
        });
    $('.ui.dropdown.diffdrop')
        .dropdown({
            values
        });


    $('.ui.dropdown.filedrop')
        .dropdown({

            // Måste få flera värden från multi select...
            // Här finn en lösning: https://stackoverflow.com/questions/40590329/cant-get-values-from-semanticui-multi-dropdown
            // man måste ha någon observer som kollar varje gång något väljs..

            onChange: function(value, text, $selectedItem) {

                //  https://medium.com/@ridermansb/update-graph-in-d3-30baaebcc8c3

                $( "#chart" ).empty();
                $("#status").empty()
                $("#display3").empty()
                $('.ui.dropdown.diffdrop').dropdown('clear');

                function callback(response) {
                    return_first = response;
                }


                $.ajax({
                    type: 'GET',
                    url: '/data/'+ text,
                    'success': function(data){
                        callback(data);

                    },
                    error: function(xhr, status, err) {
                        console.log(xhr.responseText);
                    }
                });


                // Have to add PATH public/data manually since I remove it before..
                d3.json("treemapinput?file=" + "public/data/" + text, function (err, res) {
                    if (!err) {

                        $('.ui.search')
                            .search({
                                type: 'category',
                                source: createAllList(res),
                                cache: false
                            });

                        createStatistics(res)

                        var data = d3.nest().key(function (d) {
                            return d.region;
                        }).key(function (d) {
                            return d.subregion;
                        }).entries(res);
                        main({title: ""}, {key: "Hosts", values: data});
                    }
                });
            }
        })
    ;

    // sätt den först för att rensa värden.. blir fel med CSS eller nått sen..
    $('.ui.dropdown.diffdrop').dropdown('clear'); // this will also remove css..

    $('.ui.dropdown.diffdrop')
        .dropdown({

            onChange: function(value, text, $selectedItem) {

                function callback_second(response) {
                    return_second = response;

                }

                // set URL different...NOT static/localhost....get url used right now..
                $.ajax({
                    type: 'GET',
                    url: '/data/'+ text,
                    'success': function(data){
                        callback_second(data);

                    },
                    error: function(xhr, status, err) {
                        console.log(xhr.responseText);
                    }
                });
            }
        });

</script>
</body>
</html>
