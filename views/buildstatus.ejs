<!DOCTYPE html>
<html lang="en">
<head>

    <script src="javascript/socket.io.js"></script>
    <script src="javascript/socket.io-stream.js"></script>

    <link rel="stylesheet" href="/stylesheets/buildstatus.css">

    <!-- jQuery library -->
    <script src="javascript/jquery.min.js"></script>

    <!--  ADD later.. <script src="javascript/menu.js"></script>  -->

    <link rel="stylesheet" href="/stylesheets/semantic.css">
    <script src="javascript/semantic/semantic.js"></script>

    <script src="javascript/moment.min.js"></script>
    <script>
        moment().format();
    </script>

</head>
<body class="contact-background-image">

<div class="row">
    <div class="column">
        <br id="main-container" style="padding-left: 50px">

    </div>
</div>

<div class="ui four cards" id="ongoingTasksContainer" style="padding-left: 50px;">
</div>

<script>

    $(document).ready(function() {

        // Update the bootstrap grid once the tasks are added
        function updateTaskContainerHead(containerId, jenkins_reff) {


            function isNull(obj, key) {
                return (obj[key] == null || obj[key] === undefined || obj[key] === "null");
            }

            function validate(obj) {
                var objKeys = Object.keys(obj);
                objKeys.forEach((key) => {
                    if(isNull(obj, key)) {
                        obj[key] = "";
                    }
                    if(typeof(obj[key]) == "object") {
                        validate(obj[key]);
                    }
                });
            }

            validate(jenkins_reff);

            var reff_element = '<div id="' + jenkins_reff.getJobInfo.url + '" class="ui card" style="width: 19%;">' +
                '    <div id="statuscolor_' + jenkins_reff.getJobInfo.url + '" class="content" style="height: 12%">' +
                '' +
                '        <h2 class="ui icon header">' +
                '            <i class="laptop icon"></i>' +
                '            <div class="content">' + jenkins_reff.reff_name + '</div>' +
                '            <div id="buildname_' + jenkins_reff.getJobInfo.url + '" class="content"></div>' +

                '        </h2>' +
                '    </div>' +
                '' +
                '' +
                '    <div class="content">' +
                '' +
                '        <div class="event">' +
                '            <div class="content">' +
                '                <div class="ui massive message" style="padding: 2px">' +
                '                  <i class="clock icon imuststyle"></i><div id="timer_' + jenkins_reff.getJobInfo.url + '"></div>' +
                '                    <div>Estimated duration: ' + moment.utc(jenkins_reff.getLastBuildInfo.estimatedDuration).format('HH [hours] mm [min]') + '</div>' +
                '                    <div>Job started: ' + moment.utc(jenkins_reff.getLastBuildInfo.timestamp).format(('dddd, MMMM Do YYYY, h:mm:ss a')) + '</div>' +
                '                </div>' +
                '            </div>' +
                '        </div>' +
                '' +
                '<div class="FixedHeightContainer">' +
                '<pre id="out_' + jenkins_reff.getJobInfo.url + '" class="Content" style="border: 1px solid grey;border-radius: 5px;padding: 1px"></pre>' +
                '</div>' +



                '<div id="modules_' + jenkins_reff.getJobInfo.url + '" class="ui list" style="border: 1px solid grey;border-radius: 5px;padding: 1px"></div>' +

                '<div class="ui relaxed divided list" class="ui list" style="border: 1px solid grey;border-radius: 5px;padding: 1px">' +
                '  <div class="item">' +
                '     <i class="large jenkins middle aligned icon"></i>' +
                '     <div class="content">' +
                '           <div class="description">Job name: ' + jenkins_reff.getJobInfo.displayName + '</div>' +
                '           <div class="description">Last stable build: #' + JSON.stringify(jenkins_reff.getJobInfo.lastStableBuild.number) + '</div>' +
                '           <div class="description">Last successful build: #' + JSON.stringify(jenkins_reff.getJobInfo.lastCompletedBuild.number) + '</div>' +
                '           <div class="description">Last failed build: #' + JSON.stringify(jenkins_reff.getJobInfo.lastFailedBuild.number) + '</div>' +
                '           <div class="description">Last unsuccessful build: #' + JSON.stringify(jenkins_reff.getJobInfo.lastUnsuccessfulBuild.number) + '</div>' +
                '           <div class="description">Last completed build: #' + JSON.stringify(jenkins_reff.getJobInfo.lastCompletedBuild.number) + '</div>' +
                '     </div>' +
                '    </div>' +
                '  </div>' +



              '  </div>' +
            '</div>';  // ui card main wrap

            // finns elementet? -> byt ut det...
            if ($('#' + jenkins_reff.getJobInfo.url.toString()).length)
            {
                $('#' + jenkins_reff.getJobInfo.url.toString()).replaceWith(reff_element)
            }
            else
            {
                $('#' + containerId).append(reff_element)  // if non-existing
            }

        }

 $(function() {                   // BYT mot Serverns URL auto-m....
            var socket = io.connect('http://vdc-s-automix.vdc.saab.se:3000'); // 'http://localhost:3000');

            var clear_console_reff1 = false
            var clear_console_reff2 = false
            var clear_console_reff3 = false
    //      var clear_console_reff4 = false
            var clear_console_reff5 = false
            var clear_console_reff6 = false

            var jenkins_info_reff1
            var jenkins_info_reff2
            var jenkins_info_reff3
    //      var jenkins_info_reff4
            var jenkins_info_reff5
            var jenkins_info_reff6

       //   var reff1_url = "http://localhost:8080"
         // var reff2_url = "http://admin:s**M@130.237.59.170:8080"

     // 10.68.108.164 http://hansolo    IDE .. vore koolt att ha liten GIF vid varje reff.. så varje reff har ett TEMA :-)
     // 10.68.108.165 http://leia
     // 10.68.108.166 http://mandalorian
     // 10.68.108.167 http://chewbacca

     // 10.68.234.80 http://sebulba  vrefs
     // 10.68.234.81 http://logray

     var reff1_url = "http://10.68.108.164:8080"
     var reff2_url = "http://10.68.108.165:8080"
     var reff3_url = "http://10.68.108.166:8080"
  //   var reff4_url = "http://10.68.108.167:8080"  // ska komma in om 1 år..
     var reff5_url = "http://10.68.234.80:8080"  // verkar inte vara uppsatt helt..
     var reff6_url = "http://10.68.234.81:8080"

     var reff1_obj // only used as a timer object..maybe more later..
     var reff2_obj
     var reff3_obj
  //   var reff4_obj
     var reff5_obj
     var reff6_obj

            class Reff {
                constructor(jenkins_2_obj) {
                    this.display_name = jenkins_2_obj.getJobInfo.url;

                    this.jenkins_2_obj = jenkins_2_obj

                    // Timer stuff...
                    var now  = moment()
                    var then = moment(this.jenkins_2_obj.getLastBuildInfo.timestamp)
                    this.time_since =  moment.utc(now.diff(then))

                    this.isRunning = false;
                    this.runTimer;
                }
                startTimer()
                {
                  //  if (!this.isRunning) {
                  //      this.isRunning = true;
                        this.runTimer = setInterval(() => {

                            this.time_since.add(1, 'second');
                            $('#timer_' + this.display_name).html(this.time_since.format('HH:mm:ss'))

                        }, 1000);
                 //   }
                }
                stopTimer() {
                 //   if (this.isRunning) {
                        clearInterval(this.runTimer);
                        this.runTimer = null
                 //       this.isRunning = false;
                 //   }
                }
            }

            socket.on("connect",function() {
                console.log("on connect");

                ss(socket).on('jenkins_info_reff1', function(stream,data)
                {
                    jenkins_info_reff1 = JSON.parse(data);

                    var temp = jenkins_info_reff1.getJobInfo.url
                    jenkins_info_reff1.getJobInfo.url =  temp.replace(/[^a-z0-9-_]+/gi, "")

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff1);

                    reff1_obj = new Reff(jenkins_info_reff1)
                    reff1_obj.startTimer()
                });

                // Får data från reff1 här som ska visa i textboxxen..
                ss(socket).on(reff1_url, function(stream,data, modules_status) {

                    // ---- warning! working area - wear helmet at all times -

                    console.log(modules_status)

                    // vill nu sätta in detta i .. GUI::.....
                    var modules_splitted = modules_status.split("\n")  // split on each line..

                    var all_modules = ""
                    for (const line of modules_splitted)
                    {
                        all_modules += '<div class="item">'+ line + '</div>'
                    }

                    $("#modules_"+ jenkins_info_reff1.getJobInfo.url).empty()

                    $("#modules_" + jenkins_info_reff1.getJobInfo.url).html(all_modules)

                    //----------------------------------

                    // Default color is grey - installing status
                    $("#statuscolor_" + jenkins_info_reff1.getJobInfo.url).css('background-color','silver');

                    // Om reffen redan har text, ta bort den gamla texten.
                    if(clear_console_reff1)
                    {
                        $("#out_"+ jenkins_info_reff1.getJobInfo.url).empty()
                        clear_console_reff1 = false
                        console.log("clearing console...")
                    }

                    var log = data.split("\n")  // split on each line..

                    var buildname = ""

                    for (const line of log) {

                        if (line.includes("Using latest build with specific key word:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            buildname = line_array.pop();             // last element is the build name

                            // sätt ut den...
                            $("#buildname_"+jenkins_info_reff1.getJobInfo.url).text(buildname)
                        }

                        if (line.includes("Finished:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            var build_result = line_array.pop();             // last element is the result

                            if (build_result.trim() === 'SUCCESS')
                            {
                                $("#statuscolor_" + jenkins_info_reff1.getJobInfo.url).css('background-color','#097d00');

                                $('#' + jenkins_info_reff1.getJobInfo.url)
                                       .transition('jiggle')
                                ;
                            }

                            if (build_result.trim() === 'FAILURE')
                            {
                                $("#statuscolor_" + jenkins_info_reff1.getJobInfo.url).css("background-color","#B22222")

                                $('#' + jenkins_info_reff1.getJobInfo.url)
                                    .transition('shake')
                                ;
                            }
                      //    if (build_result === 'UNSTABLE')
                      //    {
                      //        $("#buildname_"+jenkins_info_reff1.getJobInfo.displayName).text(buildname)
                      //    }
                        }
                    }

                    $("#out_"+ jenkins_info_reff1.getJobInfo.url).append(data)

                    var element = document.getElementById("out_" + jenkins_info_reff1.getJobInfo.url); // always scroll to the end of textbox
                    element.scrollTop = element.scrollHeight;
                });

                // Reff1 har fått all data, då är textboxxen klar, inget mer kommer in.
                ss(socket).on('end:'+ reff1_url, function(stream,data) {

                    clear_console_reff1 = true
                    console.log(reff1_url + " = browser refname. reff that will be cleared:"+ data)
                    reff1_obj.stopTimer()
                });

                // Remove duplication of code asap.. DRY :-/
                ////////////////////////////////////////////

                ss(socket).on('jenkins_info_reff2', function(stream,data)
                {
                    jenkins_info_reff2 = JSON.parse(data);

                    var temp = jenkins_info_reff2.getJobInfo.url
                    jenkins_info_reff2.getJobInfo.url =  temp.replace(/[^a-z0-9-_]+/gi, "")

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff2);

                    reff2_obj = new Reff(jenkins_info_reff2)
                    reff2_obj.startTimer()
                });

                ss(socket).on(reff2_url, function(stream,data) {

                    // Default color is grey - installing status
                    $("#statuscolor_" + jenkins_info_reff2.getJobInfo.url).css('background-color','silver');

                    if(clear_console_reff2)
                    {
                        $("#out_"+ jenkins_info_reff2.getJobInfo.url).empty()
                        clear_console_reff2 = false
                        console.log("clearing console...")
                    }

                    var log = data.split("\n")  // split on each line..

                    var buildname = ""

                    for (const line of log) {

                        if (line.includes("Using latest build with specific key word:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            buildname = line_array.pop();             // last element is the build name

                            // sätt ut den...
                            $("#buildname_" + jenkins_info_reff2.getJobInfo.url).text(buildname)
                        }

                        if (line.includes("Finished:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            var build_result = line_array.pop();             // last element is the result

                            if (build_result.trim() === 'SUCCESS') {
                                $("#statuscolor_" + jenkins_info_reff2.getJobInfo.url).css('background-color', '#097d00');

                                $('#' + jenkins_info_reff2.getJobInfo.url)
                                    .transition('jiggle')
                                ;
                            }

                            if (build_result.trim() === 'FAILURE') {
                                $("#statuscolor_" + jenkins_info_reff2.getJobInfo.url).css("background-color", "#B22222")

                                $('#' + jenkins_info_reff2.getJobInfo.url)
                                    .transition('shake')
                                ;
                            }
                        }
                    }

                    $("#out_"+ jenkins_info_reff2.getJobInfo.url).append(data)

                    var element = document.getElementById("out_" + jenkins_info_reff2.getJobInfo.url); // always scroll to the end of textbox
                    element.scrollTop = element.scrollHeight;
                });

                ss(socket).on('end:'+ reff2_url, function(stream,data) {

                    clear_console_reff2 = true

                    console.log(reff2_url + " = browser refname. reff that will be cleared:"+ data)

                    reff2_obj.stopTimer()
                });

                ////////////////////////////////////// reff 3 ////////////////////////////////////////////////////////////

                ss(socket).on('jenkins_info_reff3', function(stream,data)
                {
                    jenkins_info_reff3 = JSON.parse(data);

                    var temp = jenkins_info_reff3.getJobInfo.url
                    jenkins_info_reff3.getJobInfo.url =  temp.replace(/[^a-z0-9-_]+/gi, "")

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff3);

                    reff3_obj = new Reff(jenkins_info_reff3)
                    reff3_obj.startTimer()
                });

                ss(socket).on(reff3_url, function(stream,data) {

                    // Default color is grey - installing status
                    $("#statuscolor_" + jenkins_info_reff3.getJobInfo.url).css('background-color','silver');

                    if(clear_console_reff3)
                    {
                        $("#out_"+ jenkins_info_reff3.getJobInfo.url).empty()
                        clear_console_reff3 = false
                        console.log("clearing console...")
                    }

                    var log = data.split("\n")  // split on each line..

                    var buildname = ""

                    for (const line of log) {

                        if (line.includes("Using latest build with specific key word:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            buildname = line_array.pop();             // last element is the build name

                            // sätt ut den...
                            $("#buildname_" + jenkins_info_reff3.getJobInfo.url).text(buildname)
                        }

                        if (line.includes("Finished:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            var build_result = line_array.pop();             // last element is the result

                            if (build_result.trim() === 'SUCCESS') {
                                $("#statuscolor_" + jenkins_info_reff3.getJobInfo.url).css('background-color', '#097d00');

                                $('#' + jenkins_info_reff3.getJobInfo.url)
                                    .transition('jiggle')
                                ;
                            }

                            if (build_result.trim() === 'FAILURE') {
                                $("#statuscolor_" + jenkins_info_reff3.getJobInfo.url).css("background-color", "#B22222")

                                $('#' + jenkins_info_reff3.getJobInfo.url)
                                    .transition('shake')
                                ;
                            }
                        }
                    }

                    $("#out_"+ jenkins_info_reff3.getJobInfo.url).append(data)

                    var element = document.getElementById("out_" + jenkins_info_reff3.getJobInfo.url); // always scroll to the end of textbox
                    element.scrollTop = element.scrollHeight;
                });

                ss(socket).on('end:'+ reff3_url, function(stream,data) {

                    clear_console_reff3 = true

                    console.log(reff3_url + " = browser refname. reff that will be cleared:"+ data)

                    reff3_obj.stopTimer()
                });
                //////////////////////////////////////////////////////////////////////////////////////////////////////////
                ////////////////////////////////////// reff 4 ////////////////////////////////////////////////////////////
/*
                ss(socket).on('jenkins_info_reff4', function(stream,data)
                {
                    jenkins_info_reff4 = JSON.parse(data);

                    var temp = jenkins_info_reff4.getJobInfo.url
                    jenkins_info_reff4.getJobInfo.url =  temp.replace(/[^a-z0-9-_]+/gi, "")

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff4);

                    reff4_obj = new Reff(jenkins_info_reff4)
                    reff4_obj.startTimer()
                });

                ss(socket).on(reff4_url, function(stream,data) {

                    // Default color is grey - installing status
                    $("#statuscolor_" + jenkins_info_reff4.getJobInfo.url).css('background-color','silver');

                    if(clear_console_reff4)
                    {
                        $("#out_"+ jenkins_info_reff4.getJobInfo.url).empty()
                        clear_console_reff4 = false
                        console.log("clearing console...")
                    }

                    var log = data.split("\n")  // split on each line..

                    var buildname = ""

                    for (const line of log) {

                        if (line.includes("Using latest build with specific key word:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            buildname = line_array.pop();             // last element is the build name

                            // sätt ut den...
                            $("#buildname_" + jenkins_info_reff4.getJobInfo.url).text(buildname)
                        }

                        if (line.includes("Finished:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            var build_result = line_array.pop();             // last element is the result

                            if (build_result.trim() === 'SUCCESS') {
                                $("#statuscolor_" + jenkins_info_reff4.getJobInfo.url).css('background-color', '#097d00');

                                $('#' + jenkins_info_reff4.getJobInfo.url)
                                    .transition('jiggle')
                                ;
                            }

                            if (build_result.trim() === 'FAILURE') {
                                $("#statuscolor_" + jenkins_info_reff4.getJobInfo.url).css("background-color", "#B22222")

                                $('#' + jenkins_info_reff4.getJobInfo.url)
                                    .transition('shake')
                                ;
                            }
                        }
                    }

                    $("#out_"+ jenkins_info_reff4.getJobInfo.url).append(data)

                    var element = document.getElementById("out_" + jenkins_info_reff4.getJobInfo.url); // always scroll to the end of textbox
                    element.scrollTop = element.scrollHeight;
                });

                ss(socket).on('end:'+ reff4_url, function(stream,data) {

                    clear_console_reff4 = true

                    console.log(reff4_url + " = browser refname. reff that will be cleared:"+ data)

                    reff4_obj.stopTimer()
                });
                //////////////////////////////////////////////////////////////////////////////////////////////////////////
*/
                ////////////////////////////////////// reff 5 ////////////////////////////////////////////////////////////

                ss(socket).on('jenkins_info_reff5', function(stream,data)
                {
                    jenkins_info_reff5 = JSON.parse(data);

                    var temp = jenkins_info_reff5.getJobInfo.url
                    jenkins_info_reff5.getJobInfo.url =  temp.replace(/[^a-z0-9-_]+/gi, "")

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff5);

                    reff5_obj = new Reff(jenkins_info_reff5)
                    reff5_obj.startTimer()
                });

                ss(socket).on(reff5_url, function(stream,data) {

                    // Default color is grey - installing status
                    $("#statuscolor_" + jenkins_info_reff5.getJobInfo.url).css('background-color','silver');

                    if(clear_console_reff5)
                    {
                        $("#out_"+ jenkins_info_reff5.getJobInfo.url).empty()
                        clear_console_reff5 = false
                        console.log("clearing console...")
                    }

                    var log = data.split("\n")  // split on each line..

                    var buildname = ""

                    for (const line of log) {

                        if (line.includes("Using latest build with specific key word:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            buildname = line_array.pop();             // last element is the build name

                            // sätt ut den...
                            $("#buildname_" + jenkins_info_reff5.getJobInfo.url).text(buildname)
                        }

                        if (line.includes("Finished:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            var build_result = line_array.pop();             // last element is the result

                            if (build_result.trim() === 'SUCCESS') {
                                $("#statuscolor_" + jenkins_info_reff5.getJobInfo.url).css('background-color', '#097d00');

                                $('#' + jenkins_info_reff5.getJobInfo.url)
                                    .transition('jiggle')
                                ;
                            }

                            if (build_result.trim() === 'FAILURE') {
                                $("#statuscolor_" + jenkins_info_reff5.getJobInfo.url).css("background-color", "#B22222")

                                $('#' + jenkins_info_reff5.getJobInfo.url)
                                    .transition('shake')
                                ;
                            }
                        }
                    }

                    $("#out_"+ jenkins_info_reff5.getJobInfo.url).append(data)

                    var element = document.getElementById("out_" + jenkins_info_reff5.getJobInfo.url); // always scroll to the end of textbox
                    element.scrollTop = element.scrollHeight;
                });

                ss(socket).on('end:'+ reff5_url, function(stream,data) {

                    clear_console_reff5 = true

                    console.log(reff5_url + " = browser refname. reff that will be cleared:"+ data)

                    reff5_obj.stopTimer()
                });
                //////////////////////////////////////////////////////////////////////////////////////////////////////////
                ////////////////////////////////////// reff 6 ////////////////////////////////////////////////////////////

                ss(socket).on('jenkins_info_reff6', function(stream,data)
                {
                    jenkins_info_reff6 = JSON.parse(data);

                    var temp = jenkins_info_reff6.getJobInfo.url
                    jenkins_info_reff6.getJobInfo.url =  temp.replace(/[^a-z0-9-_]+/gi, "")

                    updateTaskContainerHead('ongoingTasksContainer', jenkins_info_reff6);

                    reff6_obj = new Reff(jenkins_info_reff6)
                    reff6_obj.startTimer()
                });

                ss(socket).on(reff6_url, function(stream,data) {

                    // Default color is grey - installing status
                    $("#statuscolor_" + jenkins_info_reff6.getJobInfo.url).css('background-color','silver');

                    if(clear_console_reff6)
                    {
                        $("#out_"+ jenkins_info_reff6.getJobInfo.url).empty()
                        clear_console_reff6 = false
                        console.log("clearing console...")
                    }

                    var log = data.split("\n")  // split on each line..

                    var buildname = ""

                    for (const line of log) {

                        if (line.includes("Using latest build with specific key word:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            buildname = line_array.pop();             // last element is the build name

                            // sätt ut den...
                            $("#buildname_" + jenkins_info_reff6.getJobInfo.url).text(buildname)
                        }

                        if (line.includes("Finished:"))  // '[2020-11-10T06:52:59.907Z] Using latest build with specific key word: 2020-11-10_05-13-00_htmgle-master-staging_3731'
                        {
                            var line_array = line.split(/ +/)  // split on spaces only

                            var build_result = line_array.pop();             // last element is the result

                            if (build_result.trim() === 'SUCCESS') {
                                $("#statuscolor_" + jenkins_info_reff6.getJobInfo.url).css('background-color', '#097d00');

                                $('#' + jenkins_info_reff6.getJobInfo.url)
                                    .transition('jiggle')
                                ;
                            }

                            if (build_result.trim() === 'FAILURE') {
                                $("#statuscolor_" + jenkins_info_reff6.getJobInfo.url).css("background-color", "#B22222")

                                $('#' + jenkins_info_reff6.getJobInfo.url)
                                    .transition('shake')
                                ;
                            }
                        }
                    }

                    $("#out_"+ jenkins_info_reff6.getJobInfo.url).append(data)

                    var element = document.getElementById("out_" + jenkins_info_reff6.getJobInfo.url); // always scroll to the end of textbox
                    element.scrollTop = element.scrollHeight;
                });

                ss(socket).on('end:'+ reff6_url, function(stream,data) {

                    clear_console_reff6 = true

                    console.log(reff6_url + " = browser refname. reff that will be cleared:"+ data)

                    reff6_obj.stopTimer()
                });
                //////////////////////////////////////////////////////////////////////////////////////////////////////////
            });
        });
    });
 </script>
</body>
</html>
